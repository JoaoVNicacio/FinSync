syntax = "proto3";

option csharp_namespace = "FinSync.Finances.API";

package finances;

import "google/protobuf/timestamp.proto";

// Enums
enum TransactionType {
  UNKNOWN = 0;
  INCOME = 1;
  EXPENSE = 2;
}

// Entities
message FinancialAccount {
  string id = 1;
  string userId = 2;
  string name = 3;
  int64 balance = 4;
  string currencyAcronym = 5;
  google.protobuf.Timestamp createdAt = 6;
  google.protobuf.Timestamp updatedAt = 7;
}

message RecurringExpense {
  string id = 1;
  string userId = 2;
  int64 amount = 3;
  string description = 4;
  string currencyAcronym = 5;
  google.protobuf.Timestamp dateOfOccurrence = 6;
  google.protobuf.Timestamp createdAt = 7;
  google.protobuf.Timestamp updatedAt = 8;
  string financialAccountId = 9;
}

message RecurringIncome {
  string id = 1;
  string userId = 2;
  int64 amount = 3;
  string description = 4;
  string currencyAcronym = 5;
  google.protobuf.Timestamp dateOfOccurrence = 6;
  google.protobuf.Timestamp createdAt = 7;
  google.protobuf.Timestamp updatedAt = 8;
  string financialAccountId = 9;
}

message Transaction {
  string id = 1;
  string userId = 2;
  int64 amount = 3;
  string description = 4;
  string currencyAcronym = 5;
  google.protobuf.Timestamp dateOfOccurrence = 6;
  google.protobuf.Timestamp createdAt = 7;
  google.protobuf.Timestamp updatedAt = 8;
  string categoryId = 9;
  string financialAccountId = 10;
}

message TransactionCategory {
  string id = 1;
  string userId = 2;
  string name = 3;
  TransactionType type = 4;
}

// DTOs
message FinancialAccountForCreationDTO {
  string userId = 1;
  string name = 2;
  int64 balance = 3;
  string currencyAcronym = 4;
}

message FinancialAccountForUpdateDTO{
  string id = 1;
  string userId = 2;
  string name = 3;
  int64 balance = 4;
  string currencyAcronym = 5;
}

// Common
message IdRequest {
  string id = 1;
}

message DeleteResult {
  bool wasSuccessful = 1;
}

message UserRequest {
  string userId = 1;
}

// Lists
message FinancialAccountList {
  repeated FinancialAccount items = 1;
}

message RecurringExpenseList {
  repeated RecurringExpense items = 1;
}

message RecurringIncomeList {
  repeated RecurringIncome items = 1;
}

message TransactionList {
  repeated Transaction items = 1;
}

message TransactionCategoryList {
  repeated TransactionCategory items = 1;
}

// Services
service FinancialAccountService {
  rpc Create(FinancialAccountForCreationDTO) returns (FinancialAccount);
  rpc GetById(IdRequest) returns (FinancialAccount);
  rpc Update(FinancialAccountForUpdateDTO) returns (FinancialAccount);
  rpc Delete(IdRequest) returns (DeleteResult);
  rpc ListByUser(UserRequest) returns (FinancialAccountList);
}

service RecurringExpenseService {
  rpc Create(RecurringExpense) returns (RecurringExpense);
  rpc GetById(IdRequest) returns (RecurringExpense);
  rpc Update(RecurringExpense) returns (RecurringExpense);
  rpc Delete(IdRequest) returns (DeleteResult);
  rpc ListByUser(UserRequest) returns (RecurringExpenseList);
}

service RecurringIncomeService {
  rpc Create(RecurringIncome) returns (RecurringIncome);
  rpc GetById(IdRequest) returns (RecurringIncome);
  rpc Update(RecurringIncome) returns (RecurringIncome);
  rpc Delete(IdRequest) returns (DeleteResult);
  rpc ListByUser(UserRequest) returns (RecurringIncomeList);
}

service TransactionService {
  rpc Create(Transaction) returns (Transaction);
  rpc GetById(IdRequest) returns (Transaction);
  rpc Update(Transaction) returns (Transaction);
  rpc Delete(IdRequest) returns (DeleteResult);
  rpc ListByUser(UserRequest) returns (TransactionList);
}

service TransactionCategoryService {
  rpc Create(TransactionCategory) returns (TransactionCategory);
  rpc GetById(IdRequest) returns (TransactionCategory);
  rpc Update(TransactionCategory) returns (TransactionCategory);
  rpc Delete(IdRequest) returns (DeleteResult);
  rpc ListByUser(UserRequest) returns (TransactionCategoryList);
}
