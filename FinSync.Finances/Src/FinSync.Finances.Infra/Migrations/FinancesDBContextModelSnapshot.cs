// <auto-generated />
using System;
using FinSync.Finances.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinSync.Finances.Infra.Migrations
{
    [DbContext(typeof(FinancesDBContext))]
    partial class FinancesDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("NotificationThresholdPercentage")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PlannedAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.FinancialAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyAcronym")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FinancialAccounts");
                });

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.RecurringExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyAcronym")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfOccurrence")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("FinancialAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("RecurringExpenses");
                });

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.RecurringIncome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyAcronym")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfOccurrence")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("FinancialAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("RecurringIncomes");
                });

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyAcronym")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfOccurrence")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("FinancialAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.TransactionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionCategories");
                });

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.RecurringExpense", b =>
                {
                    b.HasOne("FinSync.Finances.Domain.Entities.FinancialAccount", "FinancialAccount")
                        .WithMany("RecurringExpenses")
                        .HasForeignKey("FinancialAccountId");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.RecurringIncome", b =>
                {
                    b.HasOne("FinSync.Finances.Domain.Entities.FinancialAccount", "FinancialAccount")
                        .WithMany("RecurringIncomes")
                        .HasForeignKey("FinancialAccountId");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("FinSync.Finances.Domain.Entities.TransactionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("FinSync.Finances.Domain.Entities.FinancialAccount", "FinancialAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("FinancialAccountId");

                    b.Navigation("Category");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("FinSync.Finances.Domain.Entities.FinancialAccount", b =>
                {
                    b.Navigation("RecurringExpenses");

                    b.Navigation("RecurringIncomes");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
